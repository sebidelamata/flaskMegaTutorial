# import our database object
from app import login
from app import db
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin
from hashlib import md5

# users table
class User(UserMixin, db.Model):
    # id column is an int primary key
    id = db.Column(db.Integer, primary_key=True)
    # can't have someone elses username
    username = db.Column(db.String(64), index=True, unique=True)
    # one email can not have multiple accounts
    email = db.Column(db.String(120), index=True, unique=True)
    # password hash is the encrypted password that is stored in the database
    # (not the actual password)
    password_hash = db.Column(db.String(128))
    # defines a relationship with post tab
    posts = db.relationship('Post', backref='author', lazy='dynamic')
    # this field is for the user's bio on their page
    about_me = db.Column(db.String(500))
    # this keeps track of the last time the user was active
    last_seen = db.Column(db.DateTime, default=datetime.utcnow)

    # this method tells python how to print the objects in this
    # class instead of just returning the object
    def __repr__(self):
        return '<User {}>'.format(self.username)

    # this method sets the password hash value for a user to a
    # hash generated from the user's password input
    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    # this method checks the users registered password hash against
    # the one created by the user input for password
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    # this method creates an avatar image from an avatar at gravatar,
    # if they dont have an image registered it uses an identicon random
    # avatar generated by an md5 hash on the user's email
    def avatar(self, size):
        digest = md5(self.email.lower().encode('utf-8')).hexdigest()
        return 'https://www.gravatar.com/avatar/{}?d=identicon&s={}'.format(digest, size)



# posts table
class Post(db.Model):
    # post id is primary key int
    id = db.Column(db.Integer, primary_key=True)
    # body is the actual post that can be up to 500 characters
    body = db.Column(db.String(500))
    # timestamp is the time of the posting in UTC
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)
    # user id is the userid and is linked to the users table
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))

    # this method tells python how to print the objects in this
    # class instead of just returning the object
    def __repr__(self):
        return '<Post {}>'.format(self.body)

# login can't is a module from flask-login, but
# that doesn't know about our db because of inheritance,
# this function uses the database to return the user's id
# from the db so that the login manager knows who they are
#
# this wrapper function registers the function as one to load user data with the login manager
@login.user_loader
def load_user(id):
    return User.query.get(int(id))
