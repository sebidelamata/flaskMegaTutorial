# import our database object
from app import login
from app import db
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin
from hashlib import md5

# this is an auxillary table with other values than the
# ones created here so that we can track who is following who
# so the sql equivalent would be a create table statement here
# we have a follower id and a followed id,
# both of these are tied to the id column of the user table
followers = db.Table('followers',
                     db.Column('follower_id', db.Integer, db.ForeignKey('user.id')),
                     db.Column('followed_id', db.Integer, db.ForeignKey('user.id'))
                     )

# users table
class User(UserMixin, db.Model):
    # id column is an int primary key
    id = db.Column(db.Integer, primary_key=True)
    # can't have someone elses username
    username = db.Column(db.String(64), index=True, unique=True)
    # one email can not have multiple accounts
    email = db.Column(db.String(120), index=True, unique=True)
    # password hash is the encrypted password that is stored in the database
    # (not the actual password)
    password_hash = db.Column(db.String(128))
    # defines a relationship with post tab
    posts = db.relationship('Post', backref='author', lazy='dynamic')
    # this field is for the user's bio on their page
    about_me = db.Column(db.String(500))
    # this keeps track of the last time the user was active
    last_seen = db.Column(db.DateTime, default=datetime.utcnow)
    # list of users I follow achieved through a join
    followed = db.relationship(
        # User table is the right side of the join followers is the left side
        'User',
        secondary=followers,
        # first condition of join is that follower id is the same as id in the user table
        primaryjoin=(followers.c.follower_id == id),
        # this is similar to the above step, except this time with followed id
        secondaryjoin=(followers.c.followed_id == id),
        # from the left side this relationship is followed,
        # so on the other side it should be followers
        # lazy being set to dynamic means this query isnt run until
        # specifically asked to (same as posts), within the relationship method the second
        # lazy arg is for the right side of the sql statement and means pretty much the same thing
        backref=db.backref('followers', lazy='dynamic'), lazy='dynamic')

    # this method tells python how to print the objects in this
    # class instead of just returning the object
    def __repr__(self):
        return '<User {}>'.format(self.username)

    # this method sets the password hash value for a user to a
    # hash generated from the user's password input
    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    # this method checks the users registered password hash against
    # the one created by the user input for password
    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

    # this method creates an avatar image from an avatar at gravatar,
    # if they dont have an image registered it uses an identicon random
    # avatar generated by an md5 hash on the user's email
    def avatar(self, size):
        digest = md5(self.email.lower().encode('utf-8')).hexdigest()
        return 'https://www.gravatar.com/avatar/{}?d=identicon&s={}'.format(digest, size)

    # this method allows users to follow another user
    # if the user is not already following the user,
    # they are given the option to follow the user
    def follow(self, user):
        if not self.is_following(user):
            self.followed.append(user)

    # this is similar to the method above,
    # if the user is following a user, then they are
    # given the option to unfollow the user (removed from the list)
    def unfollow(self, user):
        if self.is_following(user):
            self.followed.remove(user)

    # this method check is the user is following another user by an sql query
    # selects the followed id column from the followers table if it matches the user's id
    # if that happens more than zero times
    def is_following(self, user):
        return self.followed.filter(
            followers.c.followed_id == user.id
        )\
             .count() > 0

    # this method returns all the posts of people the user follows
    # first we join Posts on followers where the user id for a
    # post matches the people this user follows
    # then we do a where statement where the follower id is the same as the users id
    # then we order these by date descending
    def followed_posts(self):
        followed = Post.query\
            .join(followers, (followers.c.followed_id == Post.user_id))\
            .filter(followers.c.follower_id == self.id)
        # we also want to see our own posts in the feed,
        # so we query our posts too, then sort by date
        own = Post.query.filter_by(user_id=self.id)
        return followed.union(own)\
            .order_by(Post.timestamp.desc())



# posts table
class Post(db.Model):
    # post id is primary key int
    id = db.Column(db.Integer, primary_key=True)
    # body is the actual post that can be up to 500 characters
    body = db.Column(db.String(500))
    # timestamp is the time of the posting in UTC
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)
    # user id is the userid and is linked to the users table
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))

    # this method tells python how to print the objects in this
    # class instead of just returning the object
    def __repr__(self):
        return '<Post {}>'.format(self.body)



# login can't is a module from flask-login, but
# that doesn't know about our db because of inheritance,
# this function uses the database to return the user's id
# from the db so that the login manager knows who they are
#
# this wrapper function registers the function as one to load user data with the login manager
@login.user_loader
def load_user(id):
    return User.query.get(int(id))
